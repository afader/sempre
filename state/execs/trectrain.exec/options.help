UnaryLexicon.maxEntries        <  int> : Number of results return by the lexicon [1000]
UnaryLexicon.unaryLexiconFilePath <  str> : Path to unary lexicon file [lib/fb_data/6/unaryInfoStringAndAlignment.txt]
UnaryLexicon.pruneLexicon      < bool> : Whether to prune the lexicon [false]
UnaryLexicon.pruneBeamSize     <  int> : Number of entries to leave after pruning [5]
UnaryLexicon.unaryFilterThreshold <  int> : Threshold for filtering unaries [5]
UnaryLexicon.verbose           <  int> : Verbosity [0]
BinaryLexicon.maxEntries       <  int> : Number of results return by the lexicon [1000]
BinaryLexicon.prepDropNormalization < bool> : Whether to drop the preposition when querying the lexicon [true]
BinaryLexicon.binaryLexiconFilesPath <  unk> : Path to binary lexicon files [lib/fb_data/6/binaryInfoStringAndAlignment.txt]
BinaryLexicon.pruneLexicon     < bool> : Whether to prune the lexicon [false]
BinaryLexicon.pruneBeamSize    <  int> : Number of entries to leave after pruning [5]
BinaryLexicon.verbose          <  int> : Verbosity [0]
BinaryLexicon.useOnlyJaccard   < bool> : Whether to use Jaccard as the only alignment statistic [false]
BinaryLexicon.keyToSortBy      <  str> : Alignment score to sort by [Intersection_size_typed]
EntityLexicon.maxEntries       <  int> : Number of results return by the lexicon [1000]
EntityLexicon.numOfDocs        <  int> : Number of documents queried from Lucene [10000]
EntityLexicon.exactMatchIndex  <  str> : Path to the exact match lucene index directory []
EntityLexicon.inexactMatchIndex <  str> : Path to the inexact match lucene index directory [lib/lucene/4.4/inexact/]
Parser.printAllPredictions     < bool> : For debugging, whether to print out all the predicted derivations [false]
Parser.maxPrintedPredictions   <  int> : Maximal number of predictions to print [2147483647]
Parser.coarsePrune             < bool> : Use a coarse pass to prune the chart before full parsing [true]
Parser.monotonicBeam           < bool> : Monotonically increase the number of derivations on the beam across training iterations [false]
Parser.verbose                 <  int> : How much output to print [0]
Parser.executeTopFormulaOnly   < bool> : Execute only top formula (at test time) [false]
Parser.evaluateValuesAndFormulas < bool> : Whether to evaluate with values and formulas [true]
MergeFn.hardTypeCheck          < bool> : whether to do a hard type-check [true]
MergeFn.verbose                <  int> : Verbose [0]
FreebaseInfo.schemaPath        <  str> : ttl file with schema information [lib/fb_data/93.exec/schema.ttl]
Dataset.inPaths                <str2*> : Paths to read input files (format: <group>:<file>) [train,trec.sempretrain.txt]
Dataset.maxExamples            <str2*> : Maximum number of examples to read []
Dataset.trainFrac              <  dbl> : Fraction of trainExamples (from the beginning) to keep for training [0.8]
Dataset.devFrac                <  dbl> : Fraction of trainExamples (from the end) to keep for development [0.2]
Dataset.splitRandom            < rand> : Used to randomly divide training examples [1]
Dataset.maxTokens              <  int> : Only keep examples which have at most this number of tokens [2147483647]
Dataset.readLispTreeFormat     < bool> : Read dataset in full lisptree format (otherwise JSON). [true]
SelectFn.verbose               <  int> : Verbose [0]
LanguageInfo.annotators        <  unk> : What CoreNLP annotators to run [tokenize ssplit pos lemma ner]
LanguageInfo.useAnnotators     < bool> : Whether to use CoreNLP annotators [true]
LanguageInfo.caseSensitive     < bool> : Whether to be case sensitive [false]
DescriptionValue.verbose       < bool> : Verbose. [false]
Learner.maxTrainIters          <  int> : Number of iterations to train [6]
Learner.batchSize              <  int> : When using mini-batch updates for SGD, this is the batch size [1]
Learner.staticFeaturePrefixes  <  unk> : Don't update feature weights that start with this []
Learner.outputPredDerivations  < bool> : Write predDerivations to examples file (huge) [false]
Learner.beamSizeIncreaseFactor <  dbl> : Multiply beam size by this factor after each iteration [1.0]
Learner.beamSizePerIteration   <  unk> : Take beams of this size in each iteration (repeating the last value.  Overrides beamSizeIncreaseFactor when set. []
Learner.dumpFeaturesAndCompatibility < bool> : Dump all features and compatibility scores [false]
Learner.alwaysUpdate           < bool> : Always update when using listwise model. [false]
Learner.partialReward          < bool> : Whether to update based on partial reward. [true]
Learner.binaryLogistic         < bool> : Use binary logistic regression model [false]
Learner.l2Reg                  < bool> : Whether to use l2 reg on weights [false]
Learner.l2RegCoefficient       <  dbl> : L2 reg coefficient [0.0]
Learner.l1Reg                  < bool> : Whether to use l1 reg on weights [false]
Learner.l1RegCoefficient       <  dbl> : L1 reg coefficient [0.0]
Learner.binaryLogisticThrottledUpdates < bool> : Only update weights when beam has at least one correct prediction. [false]
SemanticFn.trackLocalChoices   < bool> : Whether or not to add to Derivation.localChoices during function application. [false]
log.maxIndLevel                <  int> : Maximum indent level. [10]
log.msPerLine                  <  int> : Maximum number of milliseconds between consecutive lines of output. [0]
log.file                       <  str> : File to write log. [state/execs/trectrain.exec/log]
log.stdout                     < bool> : Whether to output to the console. [true]
log.note                       <  str> : Dummy placeholder for a comment []
log.forcePrint                 < bool> : Force printing from logs* [false]
log.maxPrintErrors             <  int> : Maximum number of errors (via error()) to print [10000]
JoinFn.hardTypeCheck           < bool> : whether to do a hard type-check [true]
JoinFn.verbose                 <  int> : Verbose [0]
BridgeFn.verbose               <  int> : Verbose [0]
BridgeFn.looseEntBridge        < bool> : Whether to allow entity bridging with no binary string match [false]
Main.interactive               < bool> :  [false]
SparqlExecutor.maxResults      <  int> : Maximum number of results to return [10]
SparqlExecutor.connectTimeoutMs <  int> : Milliseconds to wait until opening connection times out [60000]
SparqlExecutor.readTimeoutMs   <  int> : Milliseconds to wait until reading connection times out [60000]
SparqlExecutor.cachePath       <  str> : Save all SPARQL queries in a file so we don't have to hit the SPARQL endpoint too often [SparqlExecutor.cache]
SparqlExecutor.endpointUrl     <  str> : URL where the SPARQL server lives [http://localhost:3093/sparql]
SparqlExecutor.returnTable     < bool> : Whether to return a table of results rather than just a list of results [false]
SparqlExecutor.lambdaAllowDiagonals < bool> : If false, then enforce that denotation of (lambda x (border x)) does not contain (x,x) [false]
SparqlExecutor.includeEntityNames < bool> : Whether to include entity names (mostly for readability) [true]
SparqlExecutor.verbose         <  int> :  [0]
WordDistance.wordVectorFile    <  str> : Path to file containing word vectors, one per line []
WordDistance.distanceMethod    <  str> : Method for calculuating distances [cosine]
BeamParser.beamSize            <  int> :  [200]
BeamParser.maxNewTreesPerSpan  <  int> :  [2147483647]
Builder.packageName            <  str> :  [edu.stanford.nlp.sempre]
Builder.inParamsPath           <  str> :  []
Builder.executor               <  str> :  [SparqlExecutor]
Params.defaultWeight           <  dbl> : By default, all features have this weight [0.0]
Params.initWeightsRandomly     < bool> : Randomly initialize the weights [false]
Params.initRandom              < rand> : Randomly initialize the weights [1]
Params.initStepSize            <  dbl> : Initial step size [1.0]
Params.stepSizeReduction       <  dbl> : How fast to reduce the step size [0.0]
Params.adaptiveStepSize        < bool> : Use the AdaGrad algorithm (different step size for each coordinate) [true]
Params.dualAveraging           < bool> : Use dual averaging [false]
exec.monitor                   < bool> : Whether to create a thread to monitor the status of this execution. [true]
exec.execDir                   <  str> : Directory to put all output files; if empty, use execPoolDir. [state/execs/trectrain.exec]
exec.execPoolDir               <  str> : Directory which contains all the executions. []
exec.overwriteExecDir          < bool> : Overwrite the contents of the execDir if it doesn't exist (e.g., when running a thunk). [true]
exec.printOptionsAndExit       < bool> : Simply print options and exit. [false]
exec.miscOptions               < str*> : Miscellaneous options (written to options.map and output.map, displayed in servlet); example: a=3 b=4 []
exec.addToView                 < str*> : Name of the view to add this execution to in the servlet (simply creates an addToView file). [0]
exec.charEncoding              <  str> : Character encoding []
exec.jarFiles                  < str*> : Name of jar files to load prior to execution.  This is so that when the JARs change underneath us, we don't crash. []
exec.startMainTrack            < bool> : Whether to wrap everything around a main() track [true]
LexiconFn.maxDistance          <  dbl> : Keep entries with at most this distance [100.0]
LexiconFn.entityMaxDistance    <  dbl> : Keep entries with at most this distance [2.147483647E9]
LexiconFn.minPopularity        <  dbl> : Keep entries with at least this popularity [0.0]
LexiconFn.verbose              <  int> : Verbose [0]
LexiconFn.cachePath            <  str> : The path for the cache [LexiconFn.cache]
LexiconFn.lexiconClassName     <  str> : Class name for lexicon [edu.stanford.nlp.sempre.fbalignment.lexicons.Lexicon]
LexiconFn.cacheEntitiesOnly    < bool> : Cache entities only [true]
LexiconFn.entitySearchStrategy <  str> : Search strategies for entities: exact, inexact, combined [inexact]
Master.scriptPaths             <  unk> : Execute these commands before starting []
Master.newExamplesPath         <  str> : Write out new examples to this directory []
Master.logPath                 <  str> : Write out input lines to this path []
Master.onlineLearnExamples     < bool> : Online update weights on new examples. [false]
FeatureExtractor.featureDomains <  unk> : Set of feature domains to include [basicStats alignmentScores tokensDistance context skipPos joinPos wordSim tokenMatch opCount constant denotation whType]
FeatureExtractor.disableDenotationFeatures < bool> : Disable denotation features [false]
FeatureExtractor.useAllFeatures < bool> : Use all possible features, regardless of what featureDomains says [false]
FeatureExtractor.conjoinAllLemmas < bool> : Whether to conjoin all lemmas with binaries or each lemma [false]
Grammar.inPaths                <  unk> :  [data/emnlp2013.grammar]
Grammar.tags                   <  unk> : Variables which are used to interpret the grammar file [webquestions bridge pivot]
Grammar.semanticFnPackage      <  str> :  [edu.stanford.nlp.sempre]
Grammar.binarizeRules          < bool> :  [true]
Derivation.showValues          < bool> : When printing derivations, to show values (could be quite verbose) [true]
Derivation.showRules           < bool> : When printing derivations, to show rules [false]
